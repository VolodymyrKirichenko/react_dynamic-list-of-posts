{"version":3,"sources":["types/ErrorType.ts","components/Posts/Post/Post–°ard.tsx","components/Posts/PostList/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm/Inputs/InputName/InputName.tsx","components/NewCommentForm/Inputs/InputEmail/InputEmail.tsx","components/NewCommentForm/Inputs/InputBody/InputBody.tsx","components/NewCommentForm/Buttons/ButtonAddComment.tsx","components/NewCommentForm/Buttons/ButtonClearForm.tsx","utils/fetchClient.ts","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/NewCommentForm/hooks/useForm.ts","components/Posts/PostDetails/PostInfo/PostInfo.tsx","components/Posts/PostDetails/CommentsToPost/CommentsToPost.tsx","components/Posts/PostDetails/PostDetails.tsx","components/Posts/PostDetails/hooks/useDetails.ts","components/Users/UserSelected/UserSelected.tsx","components/Users/UserSelector/DropdownSelectButton/DropdownSelectButton.tsx","components/Users/UserSelector/UserSelector.tsx","components/App/AppError/AppError.tsx","api/users.ts","api/posts.ts","components/App/AppMain/App.tsx","components/App/hooks/useApp.ts","index.tsx"],"names":["ErrorType","PostCard","memo","props","post","isPostSelected","onPostSelected","id","title","className","type","cn","onClick","PostsList","posts","selectedPostId","map","Loader","InputName","value","error","onChange","htmlFor","name","placeholder","InputNameError","InputEmail","InputEmailError","InputBody","InputBodyError","ButtonAddComment","isLoading","ButtonClearForm","isError","isFilled","onReset","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","client","getComments","postId","a","deleteComments","userId","createComments","comment","email","NewCommentForm","onLoad","useState","setName","setEmail","setBody","setIsLoading","None","nameError","setNameError","emailError","setEmailError","bodyError","setBodyError","errorLoading","setErrorLoading","trimName","trim","trimEmail","trimBody","isNameError","length","isEmailError","includes","isBodyError","validatorErrors","some","el","handleChangeName","useCallback","e","target","handleChangeEmail","handleChangeBody","addComment","newComment","LoadAddComments","handleSubmit","preventDefault","resetForm","useForm","onSubmit","PostInfo","CommentsToPost","onDeleteComment","href","PostDetails","comments","setComments","isErrorLoading","setIsErrorLoading","isVisibleForm","setIsVisibleForm","handleVisibleForm","loadComments","LoadComments","commentsFromServer","removeComments","useEffect","useDetails","SelectedUser","user","isUserSelected","onUserSelected","DropdownSelectButton","selectUser","selectedUserName","onVisible","UserSelector","users","onSelect","setSelectedUserName","setSelectUser","handleUserSelected","isVisible","role","AppError","getUsers","getPosts","App","setPosts","setUsers","setError","selectedPost","setSelectedPost","selectedUser","setSelectedUser","isPosts","loadUsers","usersFromServer","LoadUsers","loadPosts","postsFromServer","LoadPosts","selectingPost","useApp","classNames","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a1ea42e9.chunk.js","sourcesContent":["export enum ErrorType {\n  LoadUsers = 'Unable to load a users',\n  LoadComments = 'Unable to load a comments',\n  LoadPosts = 'Unable to load a posts',\n  LoadAddComments = 'Unable to add a comment',\n  InputNameError = 'The name must contain at least 8 symbols',\n  InputEmailError = 'The form must contain a valid email address',\n  InputBodyError = 'Enter some text',\n  None = '',\n}\n","import { FC, memo } from 'react';\nimport cn from 'classnames';\nimport { Post } from '../../../types/Post';\n\ninterface Props {\n  post: Post;\n  onPostSelected: (post: Post | null) => void,\n  isPostSelected: boolean;\n}\n\nexport const PostCard: FC<Props> = memo((props) => {\n  const { post, isPostSelected, onPostSelected } = props;\n\n  return (\n    <tr data-cy=\"Post\">\n      <td data-cy={post.id}>{post.id}</td>\n\n      <td data-cy=\"PostTitle\">\n        {post.title}\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          type=\"button\"\n          data-cy=\"PostButton\"\n          className={cn('button', 'is-link', {\n            'is-light': !isPostSelected,\n          })}\n          onClick={() => onPostSelected(\n            isPostSelected ? null : post,\n          )}\n        >\n          {isPostSelected ? 'Close' : 'Open'}\n        </button>\n      </td>\n    </tr>\n  );\n});\n","import { FC, memo } from 'react';\nimport { Post } from '../../../types/Post';\nimport { PostCard } from '../Post/Post–°ard';\n\ninterface Props {\n  posts: Post[];\n  onPostSelected: (post: Post | null) => void,\n  selectedPostId: number | undefined;\n}\n\nexport const PostsList: FC<Props> = memo((props) => {\n  const { posts, onPostSelected, selectedPostId = 0 } = props;\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th />\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => {\n            const isPostSelected = post.id === selectedPostId;\n\n            return (\n              <PostCard\n                key={post.id}\n                post={post}\n                onPostSelected={onPostSelected}\n                isPostSelected={isPostSelected}\n              />\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n});\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { ChangeEvent, FC, memo } from 'react';\nimport cn from 'classnames';\nimport { ErrorType } from '../../../../types/ErrorType';\n\ninterface Props {\n  value: string\n  error: string;\n  onChange: (e: ChangeEvent<HTMLInputElement>) => void;\n}\n\nexport const InputName: FC<Props> = memo((props) => {\n  const { value, error, onChange } = props;\n\n  return (\n    <div className=\"field\" data-cy=\"NameField\">\n      <label className=\"label\" htmlFor=\"comment-author-name\">\n        Author Name\n      </label>\n\n      <div className=\"control has-icons-left has-icons-right\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          id=\"comment-author-name\"\n          placeholder=\"Name Surname\"\n          className={cn('input', {\n            'is-danger': error,\n          })}\n          value={value}\n          onChange={onChange}\n        />\n\n        <span className=\"icon is-small is-left\">\n          <i className=\"fas fa-user\" />\n        </span>\n\n        {error && (\n          <span\n            className=\"icon is-small is-right has-text-danger\"\n            data-cy=\"ErrorIcon\"\n          >\n            <i className=\"fas fa-exclamation-triangle\" />\n          </span>\n        )}\n      </div>\n\n      {error && (\n        <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n          {ErrorType.InputNameError}\n        </p>\n      )}\n    </div>\n  );\n});\n","import { ChangeEvent, FC, memo } from 'react';\nimport cn from 'classnames';\nimport { ErrorType } from '../../../../types/ErrorType';\n\ninterface Props {\n  value: string;\n  error: string;\n  onChange: (e: ChangeEvent<HTMLInputElement>) => void;\n}\n\nexport const InputEmail: FC<Props> = memo((props) => {\n  const { value, error, onChange } = props;\n\n  return (\n    <div className=\"field\" data-cy=\"EmailField\">\n      <label className=\"label\" htmlFor=\"comment-author-email\">\n        Author Email\n      </label>\n\n      <div className=\"control has-icons-left has-icons-right\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          id=\"comment-author-email\"\n          placeholder=\"email@test.com\"\n          className={cn('input', {\n            'is-danger': error,\n          })}\n          value={value}\n          onChange={onChange}\n        />\n\n        <span className=\"icon is-small is-left\">\n          <i className=\"fas fa-envelope\" />\n        </span>\n\n        {error && (\n          <span\n            className=\"icon is-small is-right has-text-danger\"\n            data-cy=\"ErrorIcon\"\n          >\n            <i className=\"fas fa-exclamation-triangle\" />\n          </span>\n        )}\n      </div>\n\n      {error && (\n        <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n          {ErrorType.InputEmailError}\n        </p>\n      )}\n    </div>\n  );\n});\n","import { ChangeEvent, FC, memo } from 'react';\nimport cn from 'classnames';\nimport { ErrorType } from '../../../../types/ErrorType';\n\ninterface Props {\n  value: string;\n  error: string;\n  onChange: (e: ChangeEvent<HTMLTextAreaElement>) => void;\n}\n\nexport const InputBody: FC<Props> = memo((props) => {\n  const { value, error, onChange } = props;\n\n  return (\n    <div className=\"field\" data-cy=\"BodyField\">\n      <label className=\"label\" htmlFor=\"comment-body\">\n        Comment Text\n      </label>\n\n      <div className=\"control\">\n        <textarea\n          id=\"comment-body\"\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className={cn('textarea', {\n            'is-danger': error,\n          })}\n          value={value}\n          onChange={onChange}\n        />\n      </div>\n\n      {error && (\n        <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n          {ErrorType.InputBodyError}\n        </p>\n      )}\n    </div>\n  );\n});\n","import { FC, memo } from 'react';\nimport cn from 'classnames';\n\ninterface Props {\n  isLoading: boolean;\n}\n\nexport const ButtonAddComment: FC<Props> = memo((props) => {\n  const { isLoading } = props;\n\n  return (\n    <div className=\"control\">\n      <button\n        type=\"submit\"\n        className={cn('button', 'is-link', {\n          'is-loading': isLoading,\n        })}\n      >\n        Add\n      </button>\n    </div>\n  );\n});\n","import { FC, memo } from 'react';\nimport cn from 'classnames';\n\ninterface Props {\n  isError: boolean;\n  isFilled: boolean;\n  onReset: () => void;\n}\n\nexport const ButtonClearForm: FC<Props> = memo((props) => {\n  const { isError, isFilled, onReset } = props;\n\n  return (\n    <div className=\"control\">\n      <button\n        type=\"button\"\n        className={cn('button', 'is-link', {\n          'is-light': !isFilled && !isError,\n        })}\n        onClick={onReset}\n      >\n        Clear\n      </button>\n    </div>\n  );\n});\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { client } from '../utils/fetchClient';\nimport { Comment } from '../types/Comment';\n\nexport const getComments = async (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComments = async (userId: number) => {\n  return client.delete(`/comments/${userId}`);\n};\n\nexport const createComments = async (comment: Omit<Comment, 'id'>) => {\n  const {\n    postId, body, email, name,\n  } = comment;\n\n  return client.post<Comment>('/comments', {\n    postId, body, email, name,\n  });\n};\n","import { FC, memo } from 'react';\nimport { Post } from '../../types/Post';\nimport { Loader } from '../Loader';\nimport { InputName } from './Inputs/InputName/InputName';\nimport { InputEmail } from './Inputs/InputEmail/InputEmail';\nimport { InputBody } from './Inputs/InputBody/InputBody';\nimport { ButtonAddComment } from './Buttons/ButtonAddComment';\nimport { ButtonClearForm } from './Buttons/ButtonClearForm';\nimport { useForm } from './hooks/useForm';\n\ninterface Props {\n  onLoad: (postId: number) => void;\n  post: Post;\n}\n\nexport const NewCommentForm: FC<Props> = memo((props) => {\n  const { post, onLoad } = props;\n  const {\n    name,\n    body,\n    email,\n    isError,\n    isFilled,\n    isLoading,\n    nameError,\n    bodyError,\n    resetForm,\n    emailError,\n    errorLoading,\n    handleSubmit,\n    handleChangeBody,\n    handleChangeName,\n    handleChangeEmail,\n  } = useForm({ onLoad, post });\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      {errorLoading && (\n        <Loader />\n      )}\n\n      <InputName\n        value={name}\n        error={nameError}\n        onChange={handleChangeName}\n      />\n\n      <InputEmail\n        value={email}\n        error={emailError}\n        onChange={handleChangeEmail}\n      />\n\n      <InputBody\n        value={body}\n        error={bodyError}\n        onChange={handleChangeBody}\n      />\n\n      <div className=\"field is-grouped\">\n        <ButtonAddComment isLoading={isLoading} />\n\n        <ButtonClearForm\n          isError={isError}\n          isFilled={isFilled}\n          onReset={resetForm}\n        />\n      </div>\n    </form>\n  );\n});\n","import React, {\n  ChangeEvent, useCallback, useState,\n} from 'react';\nimport { Post } from '../../../types/Post';\nimport { ErrorType } from '../../../types/ErrorType';\nimport { createComments } from '../../../api/comments';\n\ninterface Options {\n  onLoad: (postId: number) => void;\n  post: Post;\n}\n\nexport const useForm = (options: Options) => {\n  const { onLoad, post } = options;\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [nameError, setNameError] = useState<ErrorType>(ErrorType.None);\n  const [emailError, setEmailError] = useState<ErrorType>(ErrorType.None);\n  const [bodyError, setBodyError] = useState<ErrorType>(ErrorType.None);\n  const [errorLoading, setErrorLoading] = useState<ErrorType>(ErrorType.None);\n\n  const trimName = name.trim();\n  const trimEmail = email.trim();\n  const trimBody = body.trim();\n  const isNameError = trimName.length < 8;\n  const isEmailError = trimEmail.length === 0 || (\n    !trimEmail.includes('@') || !trimEmail.includes('.')\n  );\n  const isBodyError = trimBody.length === 0;\n  const validator = [trimName, trimEmail, trimBody];\n  const validatorErrors = [nameError, emailError, bodyError];\n  const isFilled = validator.some(el => el.length > 0);\n  const isError = validatorErrors.some(error => error.length > 0);\n\n  const handleChangeName = useCallback(async (\n    e: ChangeEvent<HTMLInputElement>,\n  ) => {\n    setName(e.target.value);\n    setNameError(ErrorType.None);\n  }, []);\n\n  const handleChangeEmail = useCallback(async (\n    e: ChangeEvent<HTMLInputElement>,\n  ) => {\n    setEmail(e.target.value);\n    setEmailError(ErrorType.None);\n  }, []);\n\n  const handleChangeBody = useCallback(async (\n    e: ChangeEvent<HTMLTextAreaElement>,\n  ) => {\n    setBody(e.target.value);\n    setBodyError(ErrorType.None);\n  }, []);\n\n  const addComment = useCallback(async () => {\n    if (isNameError) {\n      setNameError(ErrorType.InputNameError);\n    }\n\n    if (isEmailError) {\n      setEmailError(ErrorType.InputEmailError);\n    }\n\n    if (isBodyError) {\n      setBodyError(ErrorType.InputBodyError);\n    }\n\n    if (isNameError || isEmailError || isBodyError) {\n      return;\n    }\n\n    const newComment = {\n      postId: post.id,\n      name: trimName,\n      email: trimEmail,\n      body: trimBody,\n    };\n\n    try {\n      setIsLoading(true);\n\n      await createComments(newComment);\n\n      onLoad(newComment.postId);\n\n      setName('');\n      setEmail('');\n      setBody('');\n    } catch {\n      setErrorLoading(ErrorType.LoadAddComments);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [name, email, body]);\n\n  const handleSubmit = useCallback(async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    await addComment();\n  }, [name, email, body]);\n\n  const resetForm = useCallback(async () => {\n    setName('');\n    setEmail('');\n    setBody('');\n\n    setNameError(ErrorType.None);\n    setBodyError(ErrorType.None);\n    setEmailError(ErrorType.None);\n  }, []);\n\n  return {\n    name,\n    body,\n    email,\n    isError,\n    isFilled,\n    isLoading,\n    nameError,\n    bodyError,\n    resetForm,\n    emailError,\n    errorLoading,\n    handleSubmit,\n    handleChangeBody,\n    handleChangeName,\n    handleChangeEmail,\n  };\n};\n","import { FC, memo } from 'react';\nimport { Post } from '../../../../types/Post';\n\ninterface Props {\n  post: Post;\n}\n\nexport const PostInfo: FC<Props> = memo((props) => {\n  const { post } = props;\n\n  return (\n    <div className=\"block\">\n      <h2 data-cy=\"PostTitle\">\n        {post?.title}\n      </h2>\n\n      <p data-cy=\"PostBody\">\n        {post?.body}\n      </p>\n    </div>\n  );\n});\n","import { FC, memo } from 'react';\nimport { Comment } from '../../../../types/Comment';\n\ninterface Props {\n  comment: Comment;\n  onDeleteComment: (userId: number) => void;\n}\n\nexport const CommentsToPost: FC<Props> = memo((props) => {\n  const {\n    comment,\n    onDeleteComment,\n  } = props;\n\n  return (\n    <article\n      className=\"message is-small\"\n      data-cy=\"Comment\"\n    >\n      <div className=\"message-header\">\n        <a\n          href={`mailto:${comment.email}`}\n          data-cy=\"CommentAuthor\"\n        >\n          {comment.name}\n        </a>\n\n        <button\n          data-cy=\"CommentDelete\"\n          type=\"button\"\n          className=\"delete is-small\"\n          aria-label=\"delete\"\n          onClick={() => onDeleteComment(comment.id)}\n        >\n          delete button\n        </button>\n      </div>\n\n      <div\n        className=\"message-body\"\n        data-cy=\"CommentBody\"\n      >\n        {comment.body}\n      </div>\n    </article>\n  );\n});\n","import { FC, memo } from 'react';\nimport { NewCommentForm } from '../../NewCommentForm/NewCommentForm';\nimport { Post } from '../../../types/Post';\nimport { PostInfo } from './PostInfo/PostInfo';\nimport { CommentsToPost } from './CommentsToPost/CommentsToPost';\nimport { Loader } from '../../Loader';\nimport { useDetails } from './hooks/useDetails';\n\ninterface Props {\n  post: Post;\n}\n\nexport const PostDetails: FC<Props> = memo((props) => {\n  const { post } = props;\n  const {\n    comments,\n    isErrorLoading,\n    isVisibleForm,\n    removeComments,\n    handleVisibleForm,\n    loadComments,\n  } = useDetails({ post });\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <PostInfo post={post} />\n\n        <div className=\"block\">\n          {isErrorLoading && (\n            <Loader />\n          )}\n\n          {isErrorLoading && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              {isErrorLoading}\n            </div>\n          )}\n\n          {!comments && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          <p className=\"title is-4\">Comments:</p>\n\n          {comments.map(comment => (\n            <CommentsToPost\n              key={comment.id}\n              comment={comment}\n              onDeleteComment={removeComments}\n            />\n          ))}\n\n          <button\n            data-cy=\"WriteCommentButton\"\n            type=\"button\"\n            className=\"button is-link\"\n            onClick={handleVisibleForm}\n          >\n            Write a comment\n          </button>\n        </div>\n\n        {isVisibleForm && (\n          <NewCommentForm\n            onLoad={loadComments}\n            post={post}\n          />\n        )}\n      </div>\n    </div>\n  );\n});\n","import { useCallback, useEffect, useState } from 'react';\nimport { Post } from '../../../../types/Post';\nimport { Comment } from '../../../../types/Comment';\nimport { ErrorType } from '../../../../types/ErrorType';\nimport { deleteComments, getComments } from '../../../../api/comments';\n\ninterface Options {\n  post: Post;\n}\n\nexport const useDetails = (options: Options) => {\n  const { post } = options;\n\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [\n    isErrorLoading,\n    setIsErrorLoading,\n  ] = useState<ErrorType>(ErrorType.None);\n  const [isVisibleForm, setIsVisibleForm] = useState(false);\n\n  const handleVisibleForm = useCallback(() => {\n    setIsVisibleForm(true);\n  }, []);\n\n  const loadComments = useCallback(async (postId: number) => {\n    setIsErrorLoading(ErrorType.LoadComments);\n    try {\n      if (post) {\n        const commentsFromServer = await getComments(postId);\n\n        setComments(commentsFromServer);\n        setIsErrorLoading(ErrorType.None);\n      }\n    } catch {\n      setIsErrorLoading(ErrorType.LoadComments);\n    }\n  }, []);\n\n  const removeComments = useCallback(async (userId: number) => {\n    try {\n      await deleteComments(userId);\n\n      loadComments(post?.id);\n    } catch {\n      setIsErrorLoading(ErrorType.LoadComments);\n    }\n  }, [post.id]);\n\n  useEffect(() => {\n    loadComments(post.id);\n  }, [post.id]);\n\n  return {\n    comments,\n    isErrorLoading,\n    isVisibleForm,\n    removeComments,\n    handleVisibleForm,\n    loadComments,\n  };\n};\n","import { FC, memo } from 'react';\nimport cn from 'classnames';\nimport { User } from '../../../types/User';\n\ninterface Props {\n  user: User;\n  isUserSelected: boolean;\n  onUserSelected: (user: User) => void;\n}\n\nexport const SelectedUser: FC<Props> = memo((props) => {\n  const { user, isUserSelected, onUserSelected } = props;\n\n  return (\n    <a\n      href={`#${user.id}`}\n      className={cn('dropdown-item', {\n        'is-active': isUserSelected,\n      })}\n      onClick={() => onUserSelected(user)}\n    >\n      {user.name}\n    </a>\n  );\n});\n","import { FC, memo } from 'react';\n\ninterface Props {\n  selectUser: boolean;\n  selectedUserName: string;\n  onVisible: (b: boolean) => void;\n}\n\nexport const DropdownSelectButton: FC<Props> = memo((props) => {\n  const { selectUser, selectedUserName, onVisible } = props;\n\n  return (\n    <div className=\"dropdown-trigger\">\n      <button\n        type=\"button\"\n        className=\"button\"\n        aria-haspopup=\"true\"\n        aria-controls=\"dropdown-menu\"\n        onClick={() => onVisible(!selectUser)}\n      >\n        <span>{selectedUserName || 'Choose a user'}</span>\n\n        <span className=\"icon is-small\">\n          <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n        </span>\n      </button>\n    </div>\n  );\n});\n","import { FC, memo, useState } from 'react';\nimport cn from 'classnames';\nimport { User } from '../../../types/User';\nimport { SelectedUser } from '../UserSelected/UserSelected';\nimport {\n  DropdownSelectButton,\n} from './DropdownSelectButton/DropdownSelectButton';\n\ninterface Props {\n  users: User[];\n  onSelect: (user: User) => void;\n}\n\nexport const UserSelector: FC<Props> = memo((props) => {\n  const { users, onSelect } = props;\n\n  const [selectedUserName, setSelectedUserName] = useState('Choose a user');\n  const [selectUser, setSelectUser] = useState(false);\n\n  const handleUserSelected = (user: User) => {\n    onSelect(user);\n    setSelectUser(false);\n    setSelectedUserName(user.name);\n  };\n\n  const handleVisible = (isVisible: boolean) => {\n    setSelectUser(isVisible);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={cn('dropdown', {\n        'is-active': selectUser,\n      })}\n    >\n      <DropdownSelectButton\n        selectUser={selectUser}\n        selectedUserName={selectedUserName}\n        onVisible={handleVisible}\n      />\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map((user) => {\n            const isUserSelected = user.name === selectedUserName;\n\n            return (\n              <SelectedUser\n                key={user.id}\n                user={user}\n                onUserSelected={handleUserSelected}\n                isUserSelected={isUserSelected}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n});\n","import { FC, memo } from 'react';\nimport { Loader } from '../../Loader';\nimport { ErrorType } from '../../../types/ErrorType';\n\ninterface Props {\n  error: ErrorType;\n}\n\nexport const AppError: FC<Props> = memo((props) => {\n  const { error } = props;\n\n  return (\n    <div>\n      <Loader />\n\n      <div\n        className=\"notification is-danger\"\n        data-cy=\"PostsLoadingError\"\n      >\n        {error}\n      </div>\n    </div>\n  );\n});\n","import { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\n\nexport const getUsers = async () => {\n  return client.get<User[]>('/users');\n};\n","import { client } from '../utils/fetchClient';\nimport { Post } from '../types/Post';\n\nexport const getPosts = async (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import { FC } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\nimport classNames from 'classnames';\nimport { PostsList } from '../../Posts/PostList/PostsList';\nimport { PostDetails } from '../../Posts/PostDetails/PostDetails';\nimport { UserSelector } from '../../Users/UserSelector/UserSelector';\nimport { AppError } from '../AppError/AppError';\nimport { useApp } from '../hooks/useApp';\n\nexport const App: FC = () => {\n  const {\n    posts,\n    users,\n    error,\n    isPosts,\n    selectedPost,\n    selectedUser,\n    selectingPost,\n    setSelectedPost,\n  } = useApp();\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  onSelect={selectingPost}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!users && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {error && (\n                  <AppError error={error} />\n                )}\n\n                {!isPosts && selectedUser && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {isPosts && (\n                  <PostsList\n                    posts={posts}\n                    onPostSelected={setSelectedPost}\n                    selectedPostId={selectedPost?.id}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile', 'is-parent', 'is-8-desktop', 'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success\">\n              {selectedPost && (\n                <PostDetails post={selectedPost} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { useCallback, useEffect, useState } from 'react';\nimport { Post } from '../../../types/Post';\nimport { User } from '../../../types/User';\nimport { ErrorType } from '../../../types/ErrorType';\nimport { getUsers } from '../../../api/users';\nimport { getPosts } from '../../../api/posts';\n\nexport const useApp = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [users, setUsers] = useState<User[]>([]);\n  const [error, setError] = useState<ErrorType>(ErrorType.None);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  const isPosts = posts.length !== 0;\n\n  const loadUsers = useCallback(async () => {\n    try {\n      const usersFromServer = await getUsers();\n\n      setUsers(usersFromServer);\n    } catch {\n      setError(ErrorType.LoadUsers);\n    }\n  }, []);\n\n  const loadPosts = useCallback(async (userId: number) => {\n    try {\n      const postsFromServer = await getPosts(userId);\n\n      setPosts(postsFromServer);\n    } catch {\n      setError(ErrorType.LoadPosts);\n    }\n  }, []);\n\n  const selectingPost = useCallback(async (user: User) => {\n    setSelectedUser(user);\n  }, []);\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  useEffect(() => {\n    setSelectedPost(null);\n\n    if (selectedUser) {\n      loadPosts(selectedUser.id);\n    } else {\n      setPosts([]);\n    }\n  }, [selectedUser?.id]);\n\n  return {\n    posts,\n    users,\n    error,\n    isPosts,\n    selectedUser,\n    selectedPost,\n    selectingPost,\n    setSelectedPost,\n  };\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './components/App/AppMain/App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}