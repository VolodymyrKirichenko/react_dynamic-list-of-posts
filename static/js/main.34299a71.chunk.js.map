{"version":3,"sources":["components/Posts/Post/Post–°ard.tsx","components/Posts/PostList/PostsList.tsx","utils/fetchClient.ts","types/ErrorType.ts","api/comments.ts","components/Loader/Loader.tsx","components/NewCommentForm/Inputs/InputName/InputName.tsx","components/NewCommentForm/Inputs/InputEmail/InputEmail.tsx","components/NewCommentForm/Inputs/InputBody/InputBody.tsx","components/NewCommentForm/Buttons/ButtonAdd.tsx","components/NewCommentForm/Buttons/ButtonClear.tsx","components/NewCommentForm/NewCommentForm.tsx","components/Posts/PostDetails/PostInfo/PostInfo.tsx","components/Posts/PostDetails/CommentsToPost/CommentsToPost.tsx","components/Posts/PostDetails/PostDetails.tsx","components/Users/UserSelected/UserSelected.tsx","components/Users/DropdownButton/DropdownButton.tsx","components/Users/UserSelector/UserSelector.tsx","api/users.ts","api/posts.ts","components/App/AppError/Error.tsx","components/App/AppMain/App.tsx","index.tsx"],"names":["PostCard","memo","props","post","selectedPostId","onPostSelected","id","title","className","type","cn","onClick","PostsList","posts","map","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","ErrorType","client","getComments","postId","a","deleteComments","userId","createComments","comment","email","name","Loader","InputName","nameError","onChangeName","htmlFor","placeholder","value","onChange","InputNameError","InputEmail","emailError","onChangeEmail","InputEmailError","InputBody","bodyError","onChangeBody","InputBodyError","ButtonAdd","isLoading","ButtonClear","isError","isFilled","onReset","NewCommentForm","onLoad","useState","setName","setEmail","setBody","None","setNameError","setEmailError","setBodyError","setIsLoading","errorLoading","setErrorLoading","trimName","trim","trimEmail","trimBody","validatorErrors","some","el","length","error","handleChangeName","useCallback","e","target","handleChangeEmail","handleChangeBody","addComment","newComment","LoadingButton","LoadAddComments","handleSubmit","preventDefault","resetForm","onSubmit","PostInfo","CommentsToPost","onDeleteComment","href","PostDetails","comments","setComments","isErrorLoading","setIsErrorLoading","isVisibleForm","setIsVisibleForm","handleVisibleForm","loadComments","LoadComments","commentsFromServer","removeComments","useEffect","SelectedUser","user","selectedUserName","onUserSelected","DropdownButton","selectUser","onVisible","UserSelector","users","onSelect","setSelectedUserName","setSelectUser","handleUserSelected","isVisible","role","getUsers","getPosts","App","setPosts","setUsers","setError","selectedPost","setSelectedPost","selectedUser","setSelectedUser","loadUsers","usersFromServer","LoadUsers","loadPosts","postsFromServer","LoadPosts","selectingPost","classNames","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.34299a71.chunk.js","sourcesContent":["import { FC, memo } from 'react';\nimport cn from 'classnames';\nimport { Post } from '../../../types/Post';\n\ninterface Props {\n  post: Post;\n  onPostSelected: (post: Post | null) => void,\n  selectedPostId: number | undefined;\n}\n\nexport const PostCard: FC<Props> = memo((props) => {\n  const { post, selectedPostId, onPostSelected } = props;\n\n  return (\n    <tr data-cy=\"Post\">\n      <td data-cy={post.id}>{post.id}</td>\n\n      <td data-cy=\"PostTitle\">\n        {post.title}\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          type=\"button\"\n          data-cy=\"PostButton\"\n          className={cn('button', 'is-link', {\n            'is-light': selectedPostId !== post.id,\n          })}\n          onClick={() => onPostSelected(\n            selectedPostId === post.id ? null : post,\n          )}\n        >\n          {selectedPostId === post.id ? 'Close' : 'Open'}\n        </button>\n      </td>\n    </tr>\n  );\n});\n","import { FC, memo } from 'react';\nimport { Post } from '../../../types/Post';\nimport { PostCard } from '../Post/Post–°ard';\n\ninterface Props {\n  posts: Post[];\n  onPostSelected: (post: Post | null) => void,\n  selectedPostId: number | undefined;\n}\n\nexport const PostsList: FC<Props> = memo((props) => {\n  const { posts, onPostSelected, selectedPostId = 0 } = props;\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th />\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <PostCard\n              post={post}\n              onPostSelected={onPostSelected}\n              selectedPostId={selectedPostId}\n            />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n});\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum ErrorType {\n  LoadUsers = 'Unable to load a users',\n  LoadComments = 'Unable to load a comments',\n  LoadPosts = 'Unable to load a posts',\n  LoadAddComments = 'Unable to add a comment',\n  LoadingButton = 'Loading',\n  InputNameError = 'Name is required',\n  InputEmailError = 'Email is required',\n  InputBodyError = 'Enter some text',\n  None = '',\n}\n","import { client } from '../utils/fetchClient';\nimport { Comment } from '../types/Comment';\n\nexport const getComments = async (postId: number | undefined) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComments = async (userId: number) => {\n  return client.delete(`/comments/${userId}`);\n};\n\nexport const createComments = async (comment: Omit<Comment, 'id'>) => {\n  const {\n    postId, body, email, name,\n  } = comment;\n\n  return client.post<Comment>('/comments', {\n    postId, body, email, name,\n  });\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { ChangeEvent, FC } from 'react';\nimport cn from 'classnames';\nimport { ErrorType } from '../../../../types/ErrorType';\n\ninterface Props {\n  name: string\n  nameError: string;\n  onChangeName: (e: ChangeEvent<HTMLInputElement>) => void;\n}\n\nexport const InputName: FC<Props> = (props) => {\n  const { nameError, name, onChangeName } = props;\n\n  return (\n    <div className=\"field\" data-cy=\"NameField\">\n      <label className=\"label\" htmlFor=\"comment-author-name\">\n        Author Name\n      </label>\n\n      <div className=\"control has-icons-left has-icons-right\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          id=\"comment-author-name\"\n          placeholder=\"Name Surname\"\n          className={cn('input', {\n            'is-danger': nameError,\n          })}\n          value={name}\n          onChange={onChangeName}\n        />\n\n        <span className=\"icon is-small is-left\">\n          <i className=\"fas fa-user\" />\n        </span>\n\n        {nameError && (\n          <span\n            className=\"icon is-small is-right has-text-danger\"\n            data-cy=\"ErrorIcon\"\n          >\n            <i className=\"fas fa-exclamation-triangle\" />\n          </span>\n        )}\n      </div>\n\n      {nameError && (\n        <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n          {ErrorType.InputNameError}\n        </p>\n      )}\n    </div>\n  );\n};\n","import { ChangeEvent, FC } from 'react';\nimport cn from 'classnames';\nimport { ErrorType } from '../../../../types/ErrorType';\n\ninterface Props {\n  email: string;\n  emailError: string;\n  onChangeEmail: (e: ChangeEvent<HTMLInputElement>) => void;\n}\n\nexport const InputEmail: FC<Props> = (props) => {\n  const { email, emailError, onChangeEmail } = props;\n\n  return (\n    <div className=\"field\" data-cy=\"EmailField\">\n      <label className=\"label\" htmlFor=\"comment-author-email\">\n        Author Email\n      </label>\n\n      <div className=\"control has-icons-left has-icons-right\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          id=\"comment-author-email\"\n          placeholder=\"email@test.com\"\n          className={cn('input', {\n            'is-danger': emailError,\n          })}\n          value={email}\n          onChange={onChangeEmail}\n        />\n\n        <span className=\"icon is-small is-left\">\n          <i className=\"fas fa-envelope\" />\n        </span>\n\n        {emailError && (\n          <span\n            className=\"icon is-small is-right has-text-danger\"\n            data-cy=\"ErrorIcon\"\n          >\n            <i className=\"fas fa-exclamation-triangle\" />\n          </span>\n        )}\n      </div>\n\n      {emailError && (\n        <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n          {ErrorType.InputEmailError}\n        </p>\n      )}\n    </div>\n  );\n};\n","import { ChangeEvent, FC } from 'react';\nimport cn from 'classnames';\nimport { ErrorType } from '../../../../types/ErrorType';\n\ninterface Props {\n  body: string;\n  bodyError: string;\n  onChangeBody: (e: ChangeEvent<HTMLTextAreaElement>) => void;\n}\n\nexport const InputBody: FC<Props> = (props) => {\n  const { body, bodyError, onChangeBody } = props;\n\n  return (\n    <div className=\"field\" data-cy=\"BodyField\">\n      <label className=\"label\" htmlFor=\"comment-body\">\n        Comment Text\n      </label>\n\n      <div className=\"control\">\n        <textarea\n          id=\"comment-body\"\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className={cn('textarea', {\n            'is-danger': bodyError,\n          })}\n          value={body}\n          onChange={onChangeBody}\n        />\n      </div>\n\n      {bodyError && (\n        <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n          {ErrorType.InputBodyError}\n        </p>\n      )}\n    </div>\n  );\n};\n","import { FC } from 'react';\nimport cn from 'classnames';\n\ninterface Props {\n  isLoading: string\n}\n\nexport const ButtonAdd: FC<Props> = (props) => {\n  const { isLoading } = props;\n\n  return (\n    <div className=\"control\">\n      <button\n        type=\"submit\"\n        className={cn(\n          'button', 'is-link', {\n            'is-loading': isLoading,\n          },\n        )}\n      >\n        Add\n      </button>\n    </div>\n  );\n};\n","import { FC } from 'react';\nimport cn from 'classnames';\n\ninterface Props {\n  isError: boolean;\n  isFilled: boolean;\n  onReset: () => void;\n}\n\nexport const ButtonClear: FC<Props> = (props) => {\n  const { isError, isFilled, onReset } = props;\n\n  return (\n    <div className=\"control\">\n      <button\n        type=\"button\"\n        className={cn('button', 'is-link', {\n          'is-light': !isFilled && !isError,\n        })}\n        onClick={onReset}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","import React, {\n  ChangeEvent, FC, useCallback, useState,\n} from 'react';\nimport { createComments } from '../../api/comments';\nimport { Post } from '../../types/Post';\nimport { Loader } from '../Loader';\nimport { InputName } from './Inputs/InputName/InputName';\nimport { InputEmail } from './Inputs/InputEmail/InputEmail';\nimport { InputBody } from './Inputs/InputBody/InputBody';\nimport { ButtonAdd } from './Buttons/ButtonAdd';\nimport { ButtonClear } from './Buttons/ButtonClear';\nimport { ErrorType } from '../../types/ErrorType';\n\ninterface Props {\n  onLoad: (postId: number) => void;\n  post: Post;\n}\n\nexport const NewCommentForm: FC<Props> = (props) => {\n  const { onLoad, post } = props;\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [nameError, setNameError] = useState<ErrorType>(ErrorType.None);\n  const [emailError, setEmailError] = useState<ErrorType>(ErrorType.None);\n  const [bodyError, setBodyError] = useState<ErrorType>(ErrorType.None);\n  const [isLoading, setIsLoading] = useState<ErrorType>(ErrorType.None);\n  const [errorLoading, setErrorLoading] = useState<ErrorType>(ErrorType.None);\n\n  const trimName = name.trim();\n  const trimEmail = email.trim();\n  const trimBody = body.trim();\n  const validator = [trimName, trimEmail, trimBody];\n  const validatorErrors = [nameError, emailError, bodyError];\n  const isFilled = validator.some(el => el.length > 0);\n  const isError = validatorErrors.some(error => error.length > 0);\n\n  const handleChangeName = useCallback(\n    async (e: ChangeEvent<HTMLInputElement>) => {\n      setName(e.target.value);\n      setNameError(ErrorType.None);\n    }, [],\n  );\n\n  const handleChangeEmail = useCallback(\n    async (e: ChangeEvent<HTMLInputElement>) => {\n      setEmail(e.target.value);\n      setEmailError(ErrorType.None);\n    }, [],\n  );\n\n  const handleChangeBody = useCallback(\n    async (e: ChangeEvent<HTMLTextAreaElement>) => {\n      setBody(e.target.value);\n      setBodyError(ErrorType.None);\n    }, [],\n  );\n\n  const addComment = useCallback(async () => {\n    setNameError(trimName.length === 0\n      ? ErrorType.InputNameError\n      : ErrorType.None);\n    setEmailError(trimEmail.length === 0\n      ? ErrorType.InputNameError\n      : ErrorType.None);\n    setBodyError(trimBody.length === 0\n      ? ErrorType.InputBodyError\n      : ErrorType.None);\n\n    if (trimName.length === 0\n      || trimEmail.length === 0\n      || trimBody.length === 0) {\n      return;\n    }\n\n    const newComment = {\n      postId: post.id,\n      name,\n      email,\n      body,\n    };\n\n    try {\n      setIsLoading(ErrorType.LoadingButton);\n\n      await createComments(newComment);\n      onLoad(newComment.postId);\n      setName('');\n      setEmail('');\n      setBody('');\n    } catch {\n      setErrorLoading(ErrorType.LoadAddComments);\n    } finally {\n      setIsLoading(ErrorType.None);\n    }\n  }, [name, email, body]);\n\n  const handleSubmit = useCallback(async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    addComment();\n  }, [name, email, body]);\n\n  const resetForm = useCallback(async () => {\n    setName('');\n    setEmail('');\n    setBody('');\n    setIsLoading(ErrorType.None);\n    setNameError(ErrorType.None);\n    setBodyError(ErrorType.None);\n    setEmailError(ErrorType.None);\n    setErrorLoading(ErrorType.None);\n  }, []);\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={(e) => handleSubmit(e)}\n    >\n      {errorLoading && (\n        <Loader />\n      )}\n\n      <InputName\n        name={name}\n        nameError={nameError}\n        onChangeName={handleChangeName}\n      />\n\n      <InputEmail\n        email={email}\n        emailError={emailError}\n        onChangeEmail={handleChangeEmail}\n      />\n\n      <InputBody\n        body={body}\n        bodyError={bodyError}\n        onChangeBody={handleChangeBody}\n      />\n\n      <div className=\"field is-grouped\">\n        <ButtonAdd isLoading={isLoading} />\n        <ButtonClear\n          isError={isError}\n          isFilled={isFilled}\n          onReset={resetForm}\n        />\n      </div>\n    </form>\n  );\n};\n","import { FC } from 'react';\nimport { Post } from '../../../../types/Post';\n\ninterface Props {\n  post: Post;\n}\n\nexport const PostInfo: FC<Props> = (props) => {\n  const { post } = props;\n\n  return (\n    <div className=\"block\">\n      <h2 data-cy=\"PostTitle\">\n        {post?.title}\n      </h2>\n\n      <p data-cy=\"PostBody\">\n        {post?.body}\n      </p>\n    </div>\n  );\n};\n","import { FC } from 'react';\nimport { Comment } from '../../../../types/Comment';\n\ninterface Props {\n  comment: Comment;\n  onDeleteComment: (userId: number) => void;\n}\n\nexport const CommentsToPost: FC<Props> = (props) => {\n  const {\n    comment,\n    onDeleteComment,\n  } = props;\n\n  return (\n    <article\n      className=\"message is-small\"\n      data-cy=\"Comment\"\n      key={comment.id}\n    >\n      <div className=\"message-header\">\n        <a\n          href={`mailto:${comment.email}`}\n          data-cy=\"CommentAuthor\"\n        >\n          {comment.name}\n        </a>\n\n        <button\n          data-cy=\"CommentDelete\"\n          type=\"button\"\n          className=\"delete is-small\"\n          aria-label=\"delete\"\n          onClick={() => onDeleteComment(comment.id)}\n        >\n          delete button\n        </button>\n      </div>\n      <div\n        className=\"message-body\"\n        data-cy=\"CommentBody\"\n      >\n        {comment.body}\n      </div>\n    </article>\n  );\n};\n","import {\n  FC, useCallback, useEffect, useState,\n} from 'react';\nimport { NewCommentForm } from '../../NewCommentForm/NewCommentForm';\nimport { Post } from '../../../types/Post';\nimport { deleteComments, getComments } from '../../../api/comments';\nimport { Comment } from '../../../types/Comment';\nimport { PostInfo } from './PostInfo/PostInfo';\nimport { CommentsToPost } from './CommentsToPost/CommentsToPost';\nimport { Loader } from '../../Loader';\nimport { ErrorType } from '../../../types/ErrorType';\n\ninterface Props {\n  post: Post;\n  selectedPostId: number | undefined;\n}\n\nexport const PostDetails: FC<Props> = (props) => {\n  const { post, selectedPostId } = props;\n\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [\n    isErrorLoading,\n    setIsErrorLoading,\n  ] = useState<ErrorType>(ErrorType.None);\n  const [isVisibleForm, setIsVisibleForm] = useState(false);\n\n  const handleVisibleForm = useCallback(() => {\n    setIsVisibleForm(true);\n  }, []);\n\n  const loadComments = useCallback(async (postId: number | undefined) => {\n    setIsErrorLoading(ErrorType.LoadComments);\n    try {\n      if (post) {\n        const commentsFromServer = await getComments(postId);\n\n        setComments(commentsFromServer);\n        setIsErrorLoading(ErrorType.None);\n      }\n    } catch {\n      setIsErrorLoading(ErrorType.LoadComments);\n    }\n  }, [selectedPostId]);\n\n  const removeComments = useCallback(async (userId: number) => {\n    try {\n      await deleteComments(userId);\n\n      loadComments(selectedPostId);\n    } catch {\n      setIsErrorLoading(ErrorType.LoadComments);\n    }\n  }, [selectedPostId]);\n\n  useEffect(() => {\n    loadComments(selectedPostId);\n  }, [selectedPostId]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <PostInfo post={post} />\n\n        <div className=\"block\">\n          {isErrorLoading && (\n            <Loader />\n          )}\n\n          {isErrorLoading && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              {isErrorLoading}\n            </div>\n          )}\n\n          {!comments && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          <p className=\"title is-4\">Comments:</p>\n\n          {comments.map(comment => (\n            <CommentsToPost\n              comment={comment}\n              onDeleteComment={removeComments}\n            />\n          ))}\n\n          <button\n            data-cy=\"WriteCommentButton\"\n            type=\"button\"\n            className=\"button is-link\"\n            onClick={handleVisibleForm}\n          >\n            Write a comment\n          </button>\n        </div>\n\n        {isVisibleForm && (\n          <NewCommentForm\n            onLoad={loadComments}\n            post={post}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import { FC, memo } from 'react';\nimport cn from 'classnames';\nimport { User } from '../../../types/User';\n\ninterface Props {\n  user: User;\n  selectedUserName: string;\n  onUserSelected: (user: User) => void;\n}\n\nexport const SelectedUser: FC<Props> = memo((props) => {\n  const { user, selectedUserName, onUserSelected } = props;\n\n  return (\n    <a\n      href={`#${user.id}`}\n      className={cn('dropdown-item', {\n        'is-active': selectedUserName === user.name,\n      })}\n      onClick={() => onUserSelected(user)}\n    >\n      {user.name}\n    </a>\n  );\n});\n","import { FC, memo } from 'react';\n\ninterface Props {\n  selectUser: boolean;\n  selectedUserName: string;\n  onVisible: (b: boolean) => void;\n}\n\nexport const DropdownButton: FC<Props> = memo((props) => {\n  const { selectUser, selectedUserName, onVisible } = props;\n\n  return (\n    <div className=\"dropdown-trigger\">\n      <button\n        type=\"button\"\n        className=\"button\"\n        aria-haspopup=\"true\"\n        aria-controls=\"dropdown-menu\"\n        onClick={() => onVisible(!selectUser)}\n      >\n        <span>{selectedUserName || 'Choose a user'}</span>\n\n        <span className=\"icon is-small\">\n          <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n        </span>\n      </button>\n    </div>\n  );\n});\n","import { FC, useState } from 'react';\nimport cn from 'classnames';\nimport { User } from '../../../types/User';\nimport { SelectedUser } from '../UserSelected/UserSelected';\nimport { DropdownButton } from '../DropdownButton/DropdownButton';\n\ninterface Props {\n  users: User[];\n  onSelect: (user: User) => void;\n}\n\nexport const UserSelector: FC<Props> = (props) => {\n  const { users, onSelect } = props;\n\n  const [selectedUserName, setSelectedUserName] = useState('Choose a user');\n  const [selectUser, setSelectUser] = useState(false);\n\n  const handleUserSelected = (user: User) => {\n    onSelect(user);\n    setSelectUser(false);\n    setSelectedUserName(user.name);\n  };\n\n  const handleVisible = (isVisible: boolean) => {\n    setSelectUser(isVisible);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={cn('dropdown', {\n        'is-active': selectUser,\n      })}\n    >\n      <DropdownButton\n        selectUser={selectUser}\n        selectedUserName={selectedUserName}\n        onVisible={handleVisible}\n      />\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map((user) => (\n            <SelectedUser\n              key={user.id}\n              user={user}\n              onUserSelected={handleUserSelected}\n              selectedUserName={selectedUserName}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\n\nexport const getUsers = async () => {\n  return client.get<User[]>('/users');\n};\n","import { client } from '../utils/fetchClient';\nimport { Post } from '../types/Post';\n\nexport const getPosts = async (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import { FC } from 'react';\nimport { Loader } from '../../Loader';\nimport { ErrorType } from '../../../types/ErrorType';\n\ninterface Props {\n  error: ErrorType;\n}\n\nexport const Error: FC<Props> = (props) => {\n  const { error } = props;\n\n  return (\n    <>\n      <Loader />\n\n      <div\n        className=\"notification is-danger\"\n        data-cy=\"PostsLoadingError\"\n      >\n        {error}\n      </div>\n    </>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from '../../Posts/PostList/PostsList';\nimport { PostDetails } from '../../Posts/PostDetails/PostDetails';\nimport { UserSelector } from '../../Users/UserSelector/UserSelector';\nimport { Post } from '../../../types/Post';\nimport { User } from '../../../types/User';\nimport { getUsers } from '../../../api/users';\nimport { getPosts } from '../../../api/posts';\nimport { ErrorType } from '../../../types/ErrorType';\nimport { Error } from '../AppError/Error';\n\nexport const App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [users, setUsers] = useState<User[]>([]);\n  const [error, setError] = useState<ErrorType>(ErrorType.None);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  const loadUsers = useCallback(async () => {\n    try {\n      const usersFromServer = await getUsers();\n\n      setUsers(usersFromServer);\n    } catch {\n      setError(ErrorType.LoadUsers);\n    }\n  }, []);\n\n  const loadPosts = useCallback(async (userId: number) => {\n    try {\n      const postsFromServer = await getPosts(userId);\n\n      setPosts(postsFromServer);\n    } catch {\n      setError(ErrorType.LoadPosts);\n    }\n  }, []);\n\n  const selectingPost = useCallback(async (user: User) => {\n    setSelectedUser(user);\n  }, []);\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  useEffect(() => {\n    setSelectedPost(null);\n\n    if (selectedUser) {\n      loadPosts(selectedUser.id);\n    } else {\n      setPosts([]);\n    }\n  }, [selectedUser?.id]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  onSelect={selectingPost}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!users && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {error && (\n                  <Error error={error} />\n                )}\n\n                {posts.length === 0 && selectedUser && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {posts.length !== 0 && (\n                  <PostsList\n                    posts={posts}\n                    onPostSelected={setSelectedPost}\n                    selectedPostId={selectedPost?.id}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile', 'is-parent', 'is-8-desktop', 'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails\n                  post={selectedPost}\n                  selectedPostId={selectedPost?.id}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './components/App/AppMain/App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}